Little Ruby Codes is a project to teach introductory learners core ideas to software development in a fun and simple manner.

The idea is to transform a simple and familiar story, which starts as a series of `puts`, into an increasingly dynamic system by adding variables, control structures, classes and more.

Using the classic story of "Little Red Riding Hood" gives the learner a consistent and simple foundation in which to add concepts.

It will also be an introduction to some simple software workflows, like git and commandline execution.

There will be an accompanying website at http://littleruby.codes/ (a new tld) that can be used through self learning or as a presentation

The base story is the Charles Perrault version, taken from The University of Pittsburgh website >> http://www.pitt.edu/~dash/type0333.html

This is hopefully the first of many "Object Orientated Stories" (OOStories or 'Double O Stories') to translate abstract literature ideas to code. However it will remain the central one for communicating ideas in the Ruby language. I have a post written about the idea here: http://caseypatrickdriscoll.com/ideas/object-orientated-stories/


Chapter 0 - Hello, World
	- Install vagrant and ubuntu
	- Install github app
	- ssh into vm
	- Create helloworld.rb
	- Successfully run on command line

	- Optionally, install iTerm/Sublime
	- Optionally, install and run watchr
	- Optionally, install pry and rbenv; discuss gems

Chapter 1 - Puts the story
	- Checkout git repo with main content ready
	- Escaping characters
		+ Add newlines
	- Add intro and ending styleblocks
	- Add header comments with author, date, description

	- Optionally, add code to save output to file
	- Optionally, show ruby-doc.org

Chapter 2 - Variables
	- Philosophy of DRY (Don't Repeat Yourself)
		+ Walk through code, show parts that are repeated, especially character names
	- Declaring and creating an instance variable
		+ Create character variables and assign: @hero, @villain, @victim
	- Concatenating Strings and interpolation
		+ Insert @hero, @villain, @victim
	- Overwriting variables and namespace
		+ Change name of @villain and @victim by creating second assignment line

		+ Add @hero_trait_1 for @hero
		+ Add plot points with @intro, @ending, @does_a_weird_thing, @door_noise, @door_instructions
	- Discuss .downcase and .upcase
		+ Change pertinent @victim calls to downcase
		+ Change @door_noise to upcase
	- Prelude to containers
		+ Add @item_ variables
		+ Add @villain_trait_ variables

	- Optionally, discuss variable scope
	- Optionally, discuss types of variables

Chapter 3 - Arrays and Hashes
	- Discuss Arrays
		+ Convert @item_ variables to @items Array keeping 'nth' index the same (to be fixed next)
	- Disuss 0th indexing (zero is first positive number after -1) 
		http://en.wikipedia.org/wiki/Zero-based_numbering
		+ Set index of @items back 1
	- Discuss Hashes
		+ Convert @villain_trait_ to @villain_traits Array
		+ Add @villain_response Hash

	
	- Optionally, get into Array and Hash methods
	- Optionally, show ruby-doc.org

Chapter 4 - Conditions and Logic
	- Discuss 'For' loops
		+ Create loop for each trait
	- Discuss 'each'
		+ Replace for trait loop with each instead

Chapter 5 - Methods
	- Discuss creating new methods
		+ Create 'narrate' method to replace 'puts' that auto adds newline
		+ Create character_says methods for when characters say lines

Chapter 6 - Objects





